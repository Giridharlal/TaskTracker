"use strict";var express=require("express"),cors=require("cors"),bcrypt=require("bcrypt"),jwt=require("jsonwebtoken"),_require=require("sqlite"),open=_require.open,sqlite3=require("sqlite3"),Cookies=require("cookie-parser"),_require2=require("uuid"),uuidv4=_require2.v4;require("dotenv").config();var app=express();app.use(cors()),app.use(express.json());var dbPath="taskTracker.db",db=null,initializeDbAndServer=function(){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(open({filename:dbPath,driver:sqlite3.Database}));case 3:return db=e.sent,e.next=6,regeneratorRuntime.awrap(db.run("CREATE TABLE IF NOT EXISTS users (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      name TEXT NOT NULL,\n      email TEXT UNIQUE NOT NULL,\n      password TEXT NOT NULL,\n      created_at TEXT DEFAULT (datetime('now', 'localtime'))\n    );"));case 6:return e.next=8,regeneratorRuntime.awrap(db.run("CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,         \n    title TEXT NOT NULL,                          \n    description TEXT,                             \n    status TEXT CHECK(status IN ('Pending', 'In Progress', 'Completed')) DEFAULT 'Pending',  \n    due_date TEXT,                                 \n    user_id INTEGER,                               \n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n    );"));case 8:app.listen(5e3,function(){console.log("Server is running at http://localhost:5000/")}),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(0),console.log("DB Error: ".concat(e.t0.message)),process.exit(1);case 15:case"end":return e.stop()}},null,null,[[0,11]])};initializeDbAndServer();var authenticateToken=function(t,n,s){var e=t.headers.authorization,r=e&&e.split(" ")[1];if(!r)return n.status(401).send("Invalid JWT Token");jwt.verify(r,process.env.JWT_SECRET,function(e,r){if(e)return n.status(401).send("Invalid JWT Token");t.userId=r.userId,s()})};app.post("/register",function(r,t){var n,s,a,u,i;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.body,s=n.name,a=n.email,u=n.password,e.next=4,regeneratorRuntime.awrap(db.get("SELECT * FROM users WHERE email = ?",[a]));case 4:if(e.sent)return e.abrupt("return",t.status(400).send("User already exists"));e.next=7;break;case 7:if(u.length<5)return e.abrupt("return",t.status(400).send("Password is too short"));e.next=9;break;case 9:return e.next=11,regeneratorRuntime.awrap(bcrypt.hash(u,10));case 11:return i=e.sent,e.next=14,regeneratorRuntime.awrap(db.run("INSERT INTO users (name, email, password) VALUES (?, ?, ?)",[s,a,i]));case 14:t.status(200).send("User created successfully"),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(0),t.status(500).send("Internal Server Error");case 20:case"end":return e.stop()}},null,null,[[0,17]])}),app.post("/login",function(r,t){var n,s,a,u,i;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.body,s=n.email,a=n.password,e.next=4,regeneratorRuntime.awrap(db.get("SELECT * FROM users WHERE email = ?",[s]));case 4:if(u=e.sent){e.next=7;break}return e.abrupt("return",t.status(400).send("Invalid user"));case 7:return e.next=9,regeneratorRuntime.awrap(bcrypt.compare(a,u.password));case 9:if(e.sent){e.next=12;break}return e.abrupt("return",t.status(400).send("Invalid password"));case 12:i=jwt.sign({userId:u.id},process.env.JWT_SECRET),t.status(200).json({token:i}),e.next=20;break;case 16:e.prev=16,e.t0=e.catch(0),console.log(e.t0),t.status(500).send("Internal Server Error");case 20:case"end":return e.stop()}},null,null,[[0,16]])}),app.post("/tasks",authenticateToken,function(r,t){var n,s,a,u,i,o,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,n=r.body,s=n.title,a=n.description,u=n.due_date,i=n.status,o=r.userId,s&&a&&u){e.next=5;break}return e.abrupt("return",t.status(400).json({error:"Missing required fields"}));case 5:return c=uuidv4(),e.next=8,regeneratorRuntime.awrap(db.run("INSERT INTO tasks (id, user_id, title, description, due_date, status) \n                  VALUES (?, ?, ?, ?, ?, ?)",[parseInt(c),o,s,a,u,i]));case 8:t.status(201).json({message:"Task created",taskId:c,title:s,description:a,due_date:u,status:i}),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(0),console.error("kjadffjba: ",e.t0),t.status(500).json({error:"Internal Server Error",details:e.t0.message});case 15:case"end":return e.stop()}},null,null,[[0,11]])}),app.get("/tasks",authenticateToken,function(r,t){var n,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.userId,e.next=4,regeneratorRuntime.awrap(db.all("SELECT * FROM tasks WHERE user_id = ?",[n]));case 4:s=e.sent,t.json(s),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),t.status(500).send("Internal Server Error");case 11:case"end":return e.stop()}},null,null,[[0,8]])}),app.put("/tasks/:id",authenticateToken,function(r,t){var n,s,a,u,i,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.params.id,s=r.body,a=s.title,u=s.status,i=s.description,o=s.due_date,e.next=5,regeneratorRuntime.awrap(db.get("SELECT * FROM tasks WHERE id = ?",[n]));case 5:if(e.sent){e.next=8;break}return e.abrupt("return",t.status(404).send("Task not found"));case 8:return e.next=10,regeneratorRuntime.awrap(db.run("UPDATE tasks SET title = ?, status = ?, description = ?, due_date = ? WHERE id = ?",[a,u,i,o,n]));case 10:t.send("Task updated"),e.next=16;break;case 13:e.prev=13,e.t0=e.catch(0),t.status(500).send("Internal Server Error");case 16:case"end":return e.stop()}},null,null,[[0,13]])}),app.delete("/tasks/:id",authenticateToken,function(r,t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.params.id,console.log("task ID: ",n),e.next=5,regeneratorRuntime.awrap(db.get("SELECT * FROM tasks WHERE id = ?",[n]));case 5:if(e.sent){e.next=8;break}return e.abrupt("return",t.status(404).send("Task not found"));case 8:return e.next=10,regeneratorRuntime.awrap(db.run("DELETE FROM tasks WHERE id = ?",[n]));case 10:t.send("Task deleted"),e.next=16;break;case 13:e.prev=13,e.t0=e.catch(0),t.status(500).send("Internal Server Error");case 16:case"end":return e.stop()}},null,null,[[0,13]])});
//# sourceMappingURL=index.min.js.map
