{"version":3,"sources":["index.js"],"names":["express","require","cors","jwt","open","sqlite3","bcrypt","uuidv4","v4","config","app","use","json","dbPath","Cookies","initializeDbAndServer","regeneratorRuntime","async","_context","prev","next","awrap","driver","Database","db","sent","run","listen","console","log","t0","concat","message","process","exit","stop","authenticateToken","req","res","authHeader","headers","token","split","status","send","verify","env","JWT_SECRET","err","user","userId","post","response","request","body","name","email","password","get","length","hash","hashedPassword","_request$body2","_context3","abrupt","compare","sign","id","_request$body3","title","description","due_date","taskId","_context4","error","parseInt","details","tasks","_context5","all","put","_request$body4","_context6","params","isPasswordValid"],"mappings":"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","file":"index.min.js","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst { open } = require('sqlite');\r\nconst sqlite3 = require('sqlite3');\r\nconst Cookies = require('cookie-parser');\r\nconst { v4: uuidv4 } = require('uuid');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst dbPath = 'taskTracker.db';\r\nlet db = null;\r\n\r\nconst initializeDbAndServer = async () => {\r\n  try {\r\n    db = await open({\r\n      filename: dbPath,\r\n      driver: sqlite3.Database,\r\n    });\r\n\r\n    // Create the users table if not exists\r\n    await db.run(`CREATE TABLE IF NOT EXISTS users (\r\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n      name TEXT NOT NULL,\r\n      email TEXT UNIQUE NOT NULL,\r\n      password TEXT NOT NULL,\r\n      created_at TEXT DEFAULT (datetime('now', 'localtime'))\r\n    );`);\r\n    \r\n    // Create the tasks table if not exists\r\n    await db.run(`CREATE TABLE IF NOT EXISTS tasks (\r\n    id INTEGER PRIMARY KEY AUTOINCREMENT,         \r\n    title TEXT NOT NULL,                          \r\n    description TEXT,                             \r\n    status TEXT CHECK(status IN ('Pending', 'In Progress', 'Completed')) DEFAULT 'Pending',  \r\n    due_date TEXT,                                 \r\n    user_id INTEGER,                               \r\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\r\n    );`);\r\n    \r\n    app.listen(5000, () => {\r\n      console.log('Server is running at http://localhost:5000/');\r\n    });\r\n  } catch (error) {\r\n    console.log(`DB Error: ${error.message}`);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\ninitializeDbAndServer();\r\n\r\n// Middleware to authenticate JWT Token\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n  \r\n  if (!token) {\r\n    return res.status(401).send('Invalid JWT Token');\r\n  }\r\n\r\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\r\n    if (err) {\r\n      return res.status(401).send('Invalid JWT Token');\r\n    }\r\n    req.userId = user.userId; \r\n    next();\r\n  });\r\n};\r\n\r\n// API 1: POST /register (User registration)\r\napp.post('/register', async (request, response) => {\r\n  try {\r\n    const { name, email, password } = request.body;\r\n\r\n    const existingUser = await db.get(`SELECT * FROM users WHERE email = ?`, [email]);\r\n\r\n    if (existingUser) {\r\n      return response.status(400).send('User already exists');\r\n    }\r\n\r\n    if (password.length < 5) {\r\n      return response.status(400).send('Password is too short');\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    await db.run(`INSERT INTO users (name, email, password) VALUES (?, ?, ?)`, [name, email, hashedPassword]);\r\n\r\n    response.status(200).send('User created successfully');\r\n  } catch (error) {\r\n    response.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n\r\n// API 2: POST /login (User login)\r\napp.post('/login', async (request, response) => {\r\n  try {\r\n    const {email, password } = request.body;\r\n\r\n    const user = await db.get(`SELECT * FROM users WHERE email = ?`, [email]);\r\n\r\n    if (!user) {\r\n      return response.status(400).send('Invalid user');\r\n    }\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);\r\n    if (!isPasswordValid) {\r\n      return response.status(400).send('Invalid password');\r\n    }\r\n    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET);\r\n    response.status(200).json({ token });\r\n  } catch (error) {\r\n    console.log(error);\r\n    response.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n\r\n// API 3: POST /tasks (Create new task)\r\napp.post('/tasks', authenticateToken, async (request, response) => {\r\n  try {\r\n    const { title, description, due_date, status } = request.body;\r\n    const userId = request.userId; \r\n\r\n    if (!title || !description || !due_date) {\r\n      return response.status(400).json({ error: 'Missing required fields' });\r\n    }\r\n\r\n    const taskId = uuidv4();\r\n    await db.run(`INSERT INTO tasks (id, user_id, title, description, due_date, status) \r\n                  VALUES (?, ?, ?, ?, ?, ?)`, [parseInt(taskId), userId, title, description, due_date, status]);\r\n\r\n    response.status(201).json({ message: 'Task created', taskId, title, description, due_date, status });\r\n  } catch (error) {\r\n    console.error('kjadffjba: ',error);  // Log the error to help with debugging\r\n    response.status(500).json({ error: 'Internal Server Error', details: error.message });\r\n  }\r\n});\r\n\r\n// API 4: GET /tasks (Get all tasks of a user)\r\napp.get('/tasks', authenticateToken, async (request, response) => {\r\n  try {\r\n    const userId = request.userId;\r\n    const tasks = await db.all(`SELECT * FROM tasks WHERE user_id = ?`, [userId]);\r\n    response.json(tasks);\r\n  } catch (error) {\r\n    response.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n\r\n// API 5: PUT /tasks/:id (Update task details)\r\napp.put('/tasks/:id', authenticateToken, async (request, response) => {\r\n  try {\r\n    const { id } = request.params;\r\n    const { title, status, description, due_date } = request.body;\r\n\r\n    const existingTask = await db.get(`SELECT * FROM tasks WHERE id = ?`, [id]);\r\n    if (!existingTask) {\r\n      return response.status(404).send('Task not found');\r\n    }\r\n\r\n    await db.run(`UPDATE tasks SET title = ?, status = ?, description = ?, due_date = ? WHERE id = ?`, \r\n                [title, status, description, due_date, id]);\r\n\r\n    response.send('Task updated');\r\n  } catch (error) {\r\n    response.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n\r\n// API 6: DELETE /tasks/:id (Delete task)\r\napp.delete('/tasks/:id', authenticateToken, async (request, response) => {\r\n  try {\r\n    const { id } = request.params;\r\n    console.log('task ID: ',id);\r\n    const existingTask = await db.get(`SELECT * FROM tasks WHERE id = ?`, [id]);\r\n    if (!existingTask) {\r\n      return response.status(404).send('Task not found');\r\n    }\r\n\r\n    await db.run(`DELETE FROM tasks WHERE id = ?`, [id]);\r\n    response.send('Task deleted');\r\n  } catch (error) {\r\n    response.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n"]}